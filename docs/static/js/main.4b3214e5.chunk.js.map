{"version":3,"sources":["context/SocketContext.js","hooks/useSocket.js","components/BandAdd.jsx","components/BandChart.jsx","components/BandList.jsx","pages/HomePage.jsx","BandNamesApp.jsx","index.js"],"names":["SocketContext","createContext","SocketProvider","children","serverPath","socket","useMemo","io","connect","transports","useState","online","setOnline","useEffect","connected","on","useSocket","Provider","value","BandAdd","useContext","valor","setvalor","action","onSubmit","e","nombre","preventDefault","length","emit","className","placeholder","type","name","id","onChange","target","BandChart","bands","console","log","crearGrafica","ctx","document","getElementById","Chart","data","labels","map","band","datasets","label","votes","backgroundColor","borderColor","borderWidth","options","animation","indexAxis","scales","x","beginAtZero","BandList","setBands","onClick","nuevoNombre","cambioNombre","onBlur","HomePage","BandNamesApp","ReactDOM","render"],"mappings":"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","file":"static/js/main.4b3214e5.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\nimport { useSocket } from \"../hooks/useSocket\";\r\n\r\nexport const SocketContext = createContext()\r\n\r\n//children es el componemte que recibimos dentro del provider\r\nexport const SocketProvider = ({children}) => {\r\n\r\n    //el custom hook del socket\r\n    //const {socket,online} = useSocket('http://localhost:8080')\r\n    const {socket,online} = useSocket('https://bandnamesbackserver.herokuapp.com/')\r\n    return (\r\n        // a trav√©s de value ponemos a disposicion lo que queramos en el provider\r\n        <SocketContext.Provider value={{socket,online}}>{children}</SocketContext.Provider>\r\n    )\r\n}","import { useEffect, useMemo, useState } from \"react\";\r\nimport  io  from \"socket.io-client\";\r\n\r\nexport const useSocket = (serverPath) =>{\r\n  //para local 'http://localhost:8080'\r\n  //necesito obtener el Socket\r\n\r\n  // El use memo es para que si el argumento no cambia\r\n  //se sigan usando el mismo socket\r\n  const socket = useMemo(\r\n    () =>\r\n      io.connect(serverPath, {\r\n        transports: [\"websocket\"],\r\n      }),\r\n    [serverPath]\r\n  );\r\n\r\n  //para verificar si esta online u offline\r\n  const [online, setOnline] = useState(false);\r\n\r\n  //nos detecta cuando nos conectamos\r\n  useEffect(() => {\r\n    // console.log(socket)\r\n    setOnline(socket.connected);\r\n  }, [socket]);\r\n\r\n\r\n  // si perdemos la conexion y la recuperamos establecemos el estado en true\r\n  useEffect(() => {\r\n    socket.on(\"connect\", () => {\r\n      setOnline(true);\r\n    });\r\n  }, [socket]);\r\n\r\n  //perdemos la conexion establecemos el estado en false\r\n  useEffect(() => {\r\n    socket.on(\"disconnect\", () => {\r\n      setOnline(false);\r\n    });\r\n  }, [socket]);\r\n\r\n \r\n\r\n  //retorno el socket y el online (el estado en que se encuentra la conexion)\r\n  return {socket ,online}\r\n}\r\n\r\n","import React, { useContext,  useState } from 'react'\r\nimport { SocketContext} from '../context/SocketContext';\r\nexport const BandAdd = () => {\r\n\r\n    const {socket} = useContext(SocketContext)\r\n    const [valor, setvalor] = useState('')\r\n\r\n\r\n    const crearBanda = (nombre) => {\r\n       socket.emit(\"crear-banda\", { nombre });\r\n     };\r\n\r\n     const onSubmit = (e)=>{\r\n            e.preventDefault()\r\n         \r\n\r\n            if(valor.length>=0){\r\n               crearBanda(valor)\r\n            }\r\n        \r\n            setvalor('')\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>Agregar Banda</h3>\r\n\r\n            <form action=\"\" onSubmit={onSubmit}>\r\n                <input className=\"form-control\"\r\n                       placeholder=\"Nuevo Nombre de la banda\" type=\"text\" name=\"\" id=\"\"\r\n                       value = {valor}\r\n                       onChange ={ (e)=>setvalor(e.target.value)}/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport React, { useContext, useEffect } from 'react'\r\nimport { Chart} from 'chart.js';\r\nimport { SocketContext } from '../context/SocketContext';\r\n\r\n \r\nexport const BandChart = () => {\r\n\r\n \r\n    const {socket} =  useContext(SocketContext)\r\n    \r\n\r\n\r\n    //Actualiza el estado de las bandas  si hay nueva informacion de bandas desde el servidor\r\n    useEffect(()=>{\r\n\r\n        socket.on(\"current-bands\", (bands) => {\r\n                console.log(bands);\r\n                crearGrafica(bands)\r\n               });\r\n        \r\n               \r\n   \r\n    },[socket])\r\n\r\n   \r\n    const crearGrafica = (bands=[])=>{\r\n        \r\n        const ctx = document.getElementById(\"myChart\");\r\n\r\n        const myChart = new Chart(ctx, {\r\n          type: \"horizontalBar\",\r\n          data: {\r\n            labels: bands.map(band=>band.name),\r\n            datasets: [\r\n              {\r\n                label: \"# of Votes\",\r\n                data: bands.map(band=>band.votes),\r\n                backgroundColor: [\r\n                  \"rgba(255, 99, 132, 0.2)\",\r\n                  \"rgba(54, 162, 235, 0.2)\",\r\n                  \"rgba(255, 206, 86, 0.2)\",\r\n                  \"rgba(75, 192, 192, 0.2)\",\r\n                  \"rgba(153, 102, 255, 0.2)\",\r\n                  \"rgba(255, 159, 64, 0.2)\",\r\n                ],\r\n                borderColor: [\r\n                  \"rgba(255, 99, 132, 1)\",\r\n                  \"rgba(54, 162, 235, 1)\",\r\n                  \"rgba(255, 206, 86, 1)\",\r\n                  \"rgba(75, 192, 192, 1)\",\r\n                  \"rgba(153, 102, 255, 1)\",\r\n                  \"rgba(255, 159, 64, 1)\",\r\n                ],\r\n                borderWidth: 1,\r\n              },\r\n            ],\r\n          },\r\n          options: {\r\n            animation:false,\r\n            indexAxis: \"x\",\r\n            scales: {\r\n              x: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          },\r\n        });\r\n          \r\n    }\r\n    return (\r\n        <div>\r\n            <canvas id=\"myChart\"></canvas>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { SocketContext} from '../context/SocketContext';\r\n\r\nexport const BandList = () => {\r\n    \r\n    const [bands, setBands] = useState([]);\r\n    const {socket} =  useContext(SocketContext)\r\n\r\n\r\n    //Actualiza el estado de las bandas  si hay nueva informacion de bandas desde el servidor\r\n    useEffect(()=>{\r\n\r\n        socket.on(\"current-bands\", (bands) => {\r\n            \r\n                 setBands(bands);\r\n               });\r\n    \r\n        // //si se destruye el bandList hago el dismount\r\n        // return ()=> socket.off()\r\n   \r\n    },[socket, bands])\r\n\r\n    //Actualiza el nombre de la banda en el estado\r\n    const cambioNombre = (e, id) => {\r\n        const nuevoNombre = e.target.value\r\n\r\n        setBands(bands => bands.map(band=>{\r\n\r\n            if(band.id===id){\r\n                band.name = nuevoNombre\r\n            }\r\n            return band\r\n        }))\r\n       \r\n    }\r\n\r\n    const onPerdioFoco = (id, nombre) => {\r\n      socket.emit(\"cambiar-nombre-banda\", { id, nombre });\r\n    };\r\n\r\n    const votar = (id) => {\r\n      socket.emit(\"votar-banda\", id);\r\n    };\r\n\r\n    const borrar = (id) => {\r\n    socket.emit(\"borrar-banda\", id);\r\n    };\r\n\r\n    const crearRows = () => {\r\n      return bands.map((band) => (\r\n        <tr key={band.id}>\r\n          <td>\r\n            <button className=\"btn btn-primary\" onClick={() => votar(band.id)}>\r\n              +1\r\n            </button>\r\n          </td>\r\n\r\n          <td>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              value={band.name}\r\n              onChange={(e) => cambioNombre(e, band.id)}\r\n              onBlur={() => onPerdioFoco(band.id, band.name)}\r\n            />\r\n          </td>\r\n          <td>\r\n            <h4>{band.votes}</h4>\r\n          </td>\r\n          <td>\r\n            <button className=\"btn btn-danger\" onClick={() => borrar(band.id)}>\r\n              borrar\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      ));\r\n    };\r\n    return (\r\n        <>\r\n                <h3>Bandas Actuales</h3>\r\n            <table className=\"table table-stripped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th></th>\r\n                            <th>Nombre</th>\r\n                            <th>Votos</th>\r\n                            <th>Borrar</th>\r\n                        \r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                                {crearRows()}\r\n                                \r\n                        </tbody>\r\n                    \r\n            </table>\r\n             \r\n        </>\r\n    )\r\n}\r\n","\n\nimport { useContext } from \"react\";\nimport { BandAdd } from \"../components/BandAdd\";\nimport { BandChart } from \"../components/BandChart\";\nimport { BandList } from \"../components/BandList\";\nimport { SocketContext } from \"../context/SocketContext\";\n;\n\n//para definir el initialState\n\n\nfunction HomePage() {\n\n\n  const {online} = useContext(SocketContext)\n \n\n  return (\n    <div className=\"container\">\n      <div className=\"alert\">\n        <p>\n          Service Status: \n          {\n            online\n              ? <span className=\"text-success\"> Online</span>\n              : <span className=\"text-danger\">  Offline</span>\n          }\n          \n         \n        </p>\n      </div>\n\n      <h1>BandNames</h1>\n      <hr/>\n      <div className=\"row\">\n        <div className=\"col col-8\">\n          <BandChart/>\n          <hr/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-8\">\n              <BandList/> \n        </div>\n\n        <div className=\"col-4\">\n        <BandAdd/>\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react'\r\nimport { SocketProvider } from './context/SocketContext'\r\nimport HomePage from './pages/HomePage'\r\n\r\nexport const BandNamesApp = () => {\r\n    return (\r\n\r\n        <SocketProvider>\r\n          <HomePage/>\r\n        </SocketProvider>\r\n        \r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport  {BandNamesApp} from './BandNamesApp';\n\n\nReactDOM.render(\n  \n    <BandNamesApp/>\n  ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}